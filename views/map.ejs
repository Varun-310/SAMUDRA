<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>ARGO Floats Map</title>

    <link href="https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.css" rel="stylesheet" />
    <style>
      :root {
        --bg: #0b1220;
        --panel: #0f172a;
        --panel-muted: #0c1424;
        --text: #e5e7eb;
        --muted: #9ca3af;
        --border: #1f2937;
        --pill-bg: #1f2937;
        --pill-text: #c7d2fe;
        --legend-bg: rgba(17,24,39,0.9);
      }
      html, body {
        margin: 0;
        height: 100%;
        width: 100%;
        background: var(--bg);
        color: var(--text);
        font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
      }
      #container {
        position: fixed;
        inset: 0;
        display: grid;
        grid-template-columns: 420px 1fr 360px;
      }
      #list {
        border-right: 1px solid var(--border);
        background: var(--panel-muted);
        overflow: auto;
        display: flex;
        flex-direction: column;
      }
      #map {
        position: relative;
      }
      #sidebar {
        border-left: 1px solid var(--border);
        background: var(--panel);
        overflow: auto;
        display: flex;
        flex-direction: column;
      }
      #sidebar header {
        padding: 12px 14px;
        border-bottom: 1px solid var(--border);
        font-weight: 600;
      }
      #details {
        padding: 12px 14px;
      }
      table {
        border-collapse: collapse;
        width: 100%;
      }
      th, td {
        text-align: left;
        padding: 6px 8px;
        border-bottom: 1px solid var(--border);
        font-size: 14px;
      }
      .muted { color: var(--muted); }
      .pill {
        display: inline-block;
        padding: 2px 8px;
        border-radius: 9999px;
        background: var(--pill-bg);
        color: var(--pill-text);
        font-size: 12px;
        font-weight: 600;
      }
      .footer {
        margin-top: auto;
        padding: 10px 14px;
        border-top: 1px solid var(--border);
        font-size: 12px;
        color: var(--muted);
      }
      .legend {
        position: absolute;
        z-index: 5;
        bottom: 12px;
        left: 12px;
        background: var(--legend-bg);
        border: 1px solid var(--border);
        border-radius: 6px;
        padding: 6px 8px;
        font-size: 12px;
      }
      .legend div { display: flex; align-items: center; gap: 6px; }
      .dot { width: 10px; height: 10px; border-radius: 50%; display: inline-block; }
      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.8);
      }
      .modal-content {
        background-color: var(--panel);
        margin: 5% auto;
        padding: 20px;
        border: 1px solid var(--border);
        border-radius: 8px;
        width: 80%;
        max-width: 1000px;
        max-height: 80vh;
        overflow-y: auto;
      }
      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid var(--border);
      }
      .close {
        color: var(--muted);
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
      }
      .close:hover { color: var(--text); }
      .charts-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
      }
      .chart-container {
        height: 300px;
        position: relative;
      }
    </style>

    <script src="https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.js"></script>
    <script src="https://unpkg.com/deck.gl@8.9.34/dist.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
  </head>
  <body>
    <div id="container">
      <aside id="list">
        <header style="padding:12px 14px; border-bottom:1px solid var(--border); display:flex; align-items:center; gap:8px;">
          <span style="font-weight:700;">Floats</span>
          <span class="pill" id="countPill">0</span>
        </header>
        <div style="padding:10px 12px; border-bottom:1px solid var(--border); display:flex; gap:8px;">
          <input id="searchInput" placeholder="Search floats..." style="flex:1; padding:8px 10px; background: var(--panel); color: var(--text); border:1px solid var(--border); border-radius:6px;" />
        </div>
        <div style="padding:10px 12px; display:flex; gap:6px; border-bottom:1px solid var(--border);">
          <button class="pill" id="filterAll">All</button>
          <button class="pill" id="filterBGC">BGC</button>
          <button class="pill" id="filterCore">Core</button>
        </div>
        <div id="listBody" style="overflow:auto;"></div>
      </aside>
      <div id="map"></div>
      <aside id="sidebar">
        <header>ARGO Float Details</header>
        <div id="details">
          <p class="muted">Click a blue dot to view details.</p>
          <div id="floatId" class="pill" style="display:none;"></div>
           <table id="infoTable" style="display:none; margin-top:10px;">
             <tbody>
               <tr><th>Latitude</th><td id="latCell"></td></tr>
               <tr><th>Longitude</th><td id="lonCell"></td></tr>
               <tr><th>Date & Time</th><td id="juldCell"></td></tr>
             </tbody>
           </table>
           <div style="margin-top:12px;">
             <button id="showChartsBtn" class="pill" style="display:none; width:100%; padding:8px; background:#1f2937; color:#c7d2fe; border:1px solid #374151; cursor:pointer;">Show Depth Profiles</button>
           </div>
        </div>
        <div class="footer">Map: Satellite (Mapbox) • Points: Latest positions • Red = history</div>
      </aside>
    </div>

    <!-- Modal for charts -->
    <div id="chartsModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h2 id="modalTitle">Depth Profiles</h2>
          <span class="close">&times;</span>
        </div>
        <div class="charts-grid">
          <div class="chart-container">
            <canvas id="chartTemp"></canvas>
          </div>
          <div class="chart-container">
            <canvas id="chartSal"></canvas>
          </div>
          <div class="chart-container">
            <canvas id="chartOxy"></canvas>
          </div>
          <div class="chart-container">
            <canvas id="chartNit"></canvas>
          </div>
          <div class="chart-container">
            <canvas id="chartPh"></canvas>
          </div>
        </div>
      </div>
    </div>

    <script>
      const MAPBOX_TOKEN = 'pk.eyJ1IjoicmFtYW5hMDciLCJhIjoiY21mYXEzZ242MG1oMzJ3cW90bDZjMzhxZCJ9.ljbKIryXLAIOraJp6kIBgw';
      const FLOATS = <%- JSON.stringify(floats || []) %>;

      mapboxgl.accessToken = MAPBOX_TOKEN;
      const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/dark-v11',
        center: [78.9629, 22.5937], // India
        zoom: 3,
        projection: 'mercator'
      });

      const {ScatterplotLayer, LineLayer, MapboxOverlay} = deck;
      let selectedFloatId = null;

      function floatsToScatterData() {
        return (FLOATS || []).map(f => ({
          id: f.id,
          type: f.type || 'core',
          position: [f.latest.longitude, f.latest.latitude],
          latest: f.latest,
          history: f.history
        }));
      }

      function buildTrajectoryPositions(history, latest) {
        const pts = (history || []).map(h => [h.longitude, h.latitude]);
        if (latest) pts.push([latest.longitude, latest.latitude]);
        return pts;
      }

      function renderLayers() {
        const filteredData = floatsToScatterData().filter(d => {
          if (currentFilter === 'all') return true;
          if (currentFilter === 'bgc') return d.type === 'bgc';
          if (currentFilter === 'core') return d.type !== 'bgc';
          return true;
        });
        
        const scatter = new ScatterplotLayer({
          id: 'floats-latest',
          data: filteredData,
          getPosition: d => d.position,
          getFillColor: d => (d.type === 'bgc' ? [16, 185, 129, 230] : [59, 130, 246, 230]),
          getRadius: 6, // pixels
          pickable: true,
          radiusUnits: 'pixels',
          parameters: { depthTest: false }
        });

        // Build trajectory for selected float
        const selected = (FLOATS || []).find(f => f.id === selectedFloatId);
        const lineData = selected ? [{
          path: buildTrajectoryPositions(selected.history, selected.latest)
        }] : [];

        const trajectory = new LineLayer({
          id: 'trajectory',
          data: lineData,
          getSourcePosition: d => d.path[0],
          getTargetPosition: d => d.path[d.path.length - 1],
          getColor: [220, 38, 38, 255], // red
          getWidth: 3,
          widthUnits: 'pixels',
          pickable: false,
          greatCircle: false,
          parameters: { depthTest: false }
        });

        // Historical small points
        const historicalPoints = new ScatterplotLayer({
          id: 'history-points',
          data: selected ? selected.history.map(h => ({ position: [h.longitude, h.latitude] })) : [],
          getPosition: d => d.position,
          getFillColor: [239, 68, 68, 220], // red
          getRadius: 3,
          pickable: false,
          radiusUnits: 'pixels',
          parameters: { depthTest: false }
        });

        overlay.setProps({ layers: [scatter, trajectory, historicalPoints] });
      }

      const overlay = new MapboxOverlay({ interleaved: true, layers: [] });
      map.addControl(overlay);

      map.on('load', () => {
        renderLayers();
        populateList();
      });

      map.on('style.load', () => {
        // Re-render layers after style change
        renderLayers();
      });

      map.on('click', (e) => {
        const info = overlay.pickObject({ x: e.point.x, y: e.point.y });
        if (info && info.object && info.layer && info.layer.id === 'floats-latest') {
          const obj = info.object;
          selectedFloatId = obj.id;
          updateSidebar(obj);
          renderLayers();
        }
      });

      function formatNumber(n, digits = 4) {
        if (n === null || n === undefined || Number.isNaN(n)) return '';
        const num = Number(n);
        return Number.isFinite(num) ? num.toFixed(digits) : '';
      }

      function julianToDate(juld) {
        if (juld === null || juld === undefined || Number.isNaN(juld)) return '';
        // JULD is days since 1950-01-01 00:00:00 UTC
        const julianEpoch = new Date('1950-01-01T00:00:00Z');
        const millisecondsPerDay = 24 * 60 * 60 * 1000;
        const date = new Date(julianEpoch.getTime() + (juld * millisecondsPerDay));
        return date.toISOString().replace('T', ' ').replace('Z', ' UTC');
      }

      function updateSidebar(obj) {
        if (!obj) return;
        const f = obj;
        const lat = f.latest.latitude;
        const lon = f.latest.longitude;
        document.getElementById('floatId').style.display = 'inline-block';
        document.getElementById('floatId').textContent = `Float ${f.id}`;

        const show = id => document.getElementById(id).parentElement.parentElement.style.display = '';
        const hide = id => document.getElementById(id).parentElement.parentElement.style.display = 'none';

        document.getElementById('infoTable').style.display = '';
        document.getElementById('latCell').textContent = formatNumber(lat, 5);
        document.getElementById('lonCell').textContent = formatNumber(lon, 5);
        document.getElementById('juldCell').textContent = julianToDate(f.latest.juld);
        document.getElementById('showChartsBtn').style.display = 'block';
      }

      let charts = {};
      function ensureChart(id, label, color) {
        const ctx = document.getElementById(id).getContext('2d');
        if (charts[id]) return charts[id];
        charts[id] = new Chart(ctx, {
          type: 'line',
          data: { labels: [], datasets: [{ label, data: [], borderColor: color, backgroundColor: color, pointRadius: 0, tension: 0.2 }] },
          options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false } }, scales: { x: { title: { display: true, text: 'Depth (PRES)' } }, y: { title: { display: true, text: label } } } }
        });
        return charts[id];
      }

      function updateCharts(f) {
        const historyAsc = (f.history || []).slice();
        // Use history to plot depth profiles; sort by pressure if available
        historyAsc.sort((a, b) => {
          const ap = a.pres ?? 0; const bp = b.pres ?? 0; return ap - bp;
        });
        const pres = historyAsc.map(h => h.pres).filter(v => v !== null && v !== undefined);
        const temp = historyAsc.map(h => h.temp).filter(v => v !== null && v !== undefined);
        const psal = historyAsc.map(h => h.psal).filter(v => v !== null && v !== undefined);
        const oxy = historyAsc.map(h => h.doxy).filter(v => v !== null && v !== undefined);
        const nit = historyAsc.map(h => h.nitrate).filter(v => v !== null && v !== undefined);
        const ph = historyAsc.map(h => h.ph).filter(v => v !== null && v !== undefined);

        const pairs = [
          { id: 'chartTemp', label: 'Temperature (°C)', vals: temp, color: '#f59e0b' },
          { id: 'chartSal', label: 'Salinity (PSU)', vals: psal, color: '#3b82f6' },
          { id: 'chartOxy', label: 'Oxygen (μmol/kg)', vals: oxy, color: '#10b981' },
          { id: 'chartNit', label: 'Nitrate (μmol/kg)', vals: nit, color: '#ef4444' },
          { id: 'chartPh', label: 'pH', vals: ph, color: '#a855f7' }
        ];

        for (const p of pairs) {
          const chart = ensureChart(p.id, p.label, p.color);
          const validData = [];
          const validLabels = [];
          for (let i = 0; i < Math.min(pres.length, p.vals.length); i++) {
            if (pres[i] !== null && pres[i] !== undefined && p.vals[i] !== null && p.vals[i] !== undefined) {
              validLabels.push(pres[i]);
              validData.push(p.vals[i]);
            }
          }
          chart.data.labels = validLabels;
          chart.data.datasets[0].data = validData;
          chart.update();
        }
      }

      // Left list filtering / search
      let currentFilter = 'all';
      let searchQuery = '';

      function matchesFilters(f) {
        const typeOk = currentFilter === 'all' || (currentFilter === 'bgc' ? f.type === 'bgc' : f.type !== 'bgc');
        const q = searchQuery.trim().toLowerCase();
        const text = `${f.id}`.toLowerCase();
        return typeOk && (q.length === 0 || text.includes(q));
      }

      function populateList() {
        const list = document.getElementById('listBody');
        list.innerHTML = '';
        const filtered = (FLOATS || []).filter(matchesFilters);
        document.getElementById('countPill').textContent = filtered.length;
        for (const f of filtered) {
          const row = document.createElement('div');
          row.style.display = 'grid';
          row.style.gridTemplateColumns = '1fr auto';
          row.style.gap = '8px';
          row.style.padding = '10px 12px';
          row.style.borderBottom = '1px solid #eef2f7';
          row.style.cursor = 'pointer';
          row.onmouseenter = () => row.style.background = '#f1f5f9';
          row.onmouseleave = () => row.style.background = '';
          const name = document.createElement('div');
          name.textContent = `Float ${f.id}`;
          const tag = document.createElement('div');
          tag.className = 'pill';
          tag.style.background = f.type === 'bgc' ? '#d1fae5' : '#dbeafe';
          tag.style.color = f.type === 'bgc' ? '#065f46' : '#1e3a8a';
          tag.textContent = f.type.toUpperCase();
          row.appendChild(name);
          row.appendChild(tag);
          row.onclick = () => {
            selectedFloatId = f.id;
            updateSidebar({ id: f.id, latest: f.latest, history: f.history });
            map.flyTo({ center: [f.latest.longitude, f.latest.latitude], zoom: Math.max(map.getZoom(), 4) });
            renderLayers();
          };
          list.appendChild(row);
        }
      }

      document.getElementById('filterAll').onclick = () => { currentFilter = 'all'; populateList(); renderLayers(); };
      document.getElementById('filterBGC').onclick = () => { currentFilter = 'bgc'; populateList(); renderLayers(); };
      document.getElementById('filterCore').onclick = () => { currentFilter = 'core'; populateList(); renderLayers(); };
      document.getElementById('searchInput').oninput = (e) => { searchQuery = e.target.value; populateList(); };

      // Modal functionality
      const modal = document.getElementById('chartsModal');
      const showBtn = document.getElementById('showChartsBtn');
      const closeBtn = document.getElementsByClassName('close')[0];

      showBtn.onclick = () => {
        modal.style.display = 'block';
        updateCharts({ id: selectedFloatId, history: (FLOATS || []).find(f => f.id === selectedFloatId)?.history || [] });
      };

      closeBtn.onclick = () => {
        modal.style.display = 'none';
      };

      window.onclick = (event) => {
        if (event.target === modal) {
          modal.style.display = 'none';
        }
      };
    </script>
  </body>
  </html>


