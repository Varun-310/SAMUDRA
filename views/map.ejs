<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>ARGO Floats Map</title>

    <link href="https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700;800&display=swap" rel="stylesheet" />
    <style>
      :root {
        --bg: #0b1220;
        --panel: #0f172a;
        --panel-muted: #0c1424;
        --text: #ffffff;
        --muted: #bfc3cb;
        --border: #233046;
        --pill-bg: #1c2740;
        --pill-text: #b9c3ff;
        --legend-bg: rgba(11,18,32,0.9);
        --grad-vertical: linear-gradient(180deg, #000000 0%, #063D67 100%);
        --grad-stroke: linear-gradient(90deg, #DEDEDE 0%, #787878 100%);
      }
      html, body {
        margin: 0;
        height: 100%;
        width: 100%;
        background: var(--bg);
        color: var(--text);
        font-family: 'Poppins', system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
      }
      #container {
        position: fixed;
        inset: 0;
        display: flex;
      }
      #list {
        border-right: 1px solid var(--border);
        background: var(--grad-vertical);
        overflow: hidden;
        display: flex;
        flex-direction: column;
        position: relative;
        width: 300px;
        transition: width 240ms ease;
        -ms-overflow-style: none;
        scrollbar-width: none;
      }
      #list::-webkit-scrollbar { display: none; }
      body.collapsed #list { width: 0; border-right: none; }
      body.collapsed #list > *:not(.collapse-toggle) { display: none !important; }
      .collapse-toggle {
        position: absolute;
        right: -16px;
        top: 50%;
        transform: translateY(-50%);
        width: 32px;
        height: 32px;
        background: #f3f4f6;
        color: #111827;
        border-radius: 9999px;
        display: flex; align-items: center; justify-content: center;
        cursor: pointer;
        border: 1px solid #e5e7eb;
        z-index: 6;
      }
      body.collapsed .collapse-toggle {
        position: fixed;
        left: 8px;
        right: auto;
      }
      #map { flex: 1 1 auto; position: relative; min-width: 0; }
      #sidebar { display: none; }
      #sidebar header {
        padding: 12px 14px;
        border-bottom: 1px solid var(--border);
        font-weight: 700;
      }
      #details {
        padding: 12px 14px;
      }
      table {
        border-collapse: collapse;
        width: 100%;
      }
      th, td {
        text-align: left;
        padding: 6px 8px;
        border-bottom: 1px solid var(--border);
        font-size: 14px;
      }
      .muted { color: var(--muted); }
      .pill {
        display: inline-block;
        padding: 2px 8px;
        border-radius: 9999px;
        background: var(--pill-bg);
        color: var(--pill-text);
        font-size: 12px;
        font-weight: 600;
      }
      .brand {
        display:flex; align-items:center; gap:10px; padding:12px 14px; border-bottom:1px solid var(--border);
      }
      .brand img { width: 36px; height: 36px; border-radius: 8px; }
      .brand .title { font-weight: 800; letter-spacing: 0.5px; }
      .top-tabs {
        position: fixed;
        top: 16px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        align-items: center;
        gap: 8px;
        background: rgba(31,41,55,0.6);
        backdrop-filter: blur(4px);
        border: 1px solid var(--border);
        border-radius: 9999px;
        padding: 6px;
        z-index: 5;
      }
      .seg-btn {
        padding: 6px 16px;
        border-radius: 9999px;
        border: none;
        cursor: pointer;
        font-weight: 600;
        color: var(--muted);
        background: transparent;
      }
      .seg-btn.active { color: var(--text); background: #374151; }
      .footer {
        margin-top: auto;
        padding: 10px 14px;
        border-top: 1px solid var(--border);
        font-size: 12px;
        color: var(--muted);
      }
      .legend {
        position: absolute;
        z-index: 5;
        bottom: 12px;
        left: 12px;
        background: var(--legend-bg);
        border: 1px solid var(--border);
        border-radius: 6px;
        padding: 6px 8px;
        font-size: 12px;
      }
      .legend div { display: flex; align-items: center; gap: 6px; }
      .dot { width: 10px; height: 10px; border-radius: 50%; display: inline-block; }
      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        inset: 0;
        width: 100%;
        height: 100%;
        background: rgba(10, 15, 25, 0.45);
        backdrop-filter: blur(8px) saturate(120%);
        -webkit-backdrop-filter: blur(8px) saturate(120%);
        animation: fadeIn 0.25s ease-in-out;
        align-items: center;
        justify-content: center;
        padding: 24px;
      }
      .modal-content {
        background: rgba(17, 24, 39, 0.35);
        border: 1px solid rgba(255, 255, 255, 0.18);
        border-radius: 16px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.35), inset 0 0 0 1px rgba(255,255,255,0.06);
        backdrop-filter: blur(14px) saturate(160%);
        -webkit-backdrop-filter: blur(14px) saturate(160%);
        width: min(1000px, 92vw);
        max-height: 82vh;
        overflow-y: auto;
        -ms-overflow-style: none; /* IE/Edge */
        scrollbar-width: none;    /* Firefox */
        padding: 20px;
        animation: slideIn 0.35s ease-out;
        transform-origin: center;
      }
      .modal-content::-webkit-scrollbar { display: none; }
      @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
      }
      @keyframes slideIn {
        from { 
          opacity: 0;
          transform: scale(0.8) translateY(-50px);
        }
        to { 
          opacity: 1;
          transform: scale(1) translateY(0);
        }
      }
      .cycle-item {
        padding: 8px 12px;
        border-bottom: 1px solid var(--border);
        cursor: pointer;
        transition: background-color 0.2s ease;
        font-size: 12px;
      }
      .cycle-item:hover {
        background-color: var(--border);
      }
      .cycle-item:last-child {
        border-bottom: none;
      }
      .chart-container {
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.6s ease;
      }
      .chart-container.visible {
        opacity: 1;
        transform: translateY(0);
      }
      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid var(--border);
      }
      .close {
        color: var(--muted);
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
      }
      .close:hover { color: var(--text); }
      .charts-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
      }
      .chart-container {
        height: 300px;
        position: relative;
      }
    </style>

    <script src="https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.js"></script>
    <script src="https://unpkg.com/deck.gl@8.9.34/dist.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
  </head>
  <body>
    <div class="top-tabs">
      <button class="seg-btn active" id="tabDashboard">Dashboard</button>
      <button class="seg-btn" id="tabSamudra">Samudra</button>
    </div>
    <div id="container">
      <aside id="list">
        <div class="brand">
          <img src="/images/image.png" alt="SAMUDRA"/>
          <div>
            <div class="title">Samudra</div>
            <div class="muted" style="font-size:12px;">Dashboard</div>
          </div>
        </div>
        <header style="padding:12px 14px; border-bottom:1px solid var(--border); display:flex; align-items:center; gap:8px;">
          <span style="font-weight:700;">Floats</span>
          <span class="pill" id="countPill">0</span>
        </header>
        <div style="padding:10px 12px; border-bottom:1px solid var(--border); display:flex; gap:8px;">
          <input id="searchInput" placeholder="Search floats..." style="flex:1; padding:10px 12px; background: rgba(12,20,36,0.9); color: var(--text); border:1px solid var(--border); border-radius:12px;" />
        </div>
        <div style="padding:10px 12px; display:flex; gap:6px; border-bottom:1px solid var(--border);">
          <button class="pill" id="filterAll">All</button>
          <button class="pill" id="filterBGC">BGC</button>
          <button class="pill" id="filterCore">Core</button>
        </div>
        <div style="padding:8px 12px; display:grid; grid-template-columns: 1fr 1fr; gap:8px; font-weight:700; color:#e5e7eb;">
          <div>Float ID</div><div>Organization</div>
        </div>
        <div id="listBody" style="overflow:auto; -ms-overflow-style:none; scrollbar-width:none;"></div>
        <style>#listBody::-webkit-scrollbar{display:none;}</style>
        <div id="leftDetails" style="padding:12px; border-top:1px solid var(--border); display:none;">
          <div id="leftFloatId" class="pill" style="margin-bottom:8px;"></div>
          <table style="width:100%; border-collapse:collapse; margin-bottom:12px;">
            <tbody>
              <tr><th style="text-align:left; padding:4px 0; color:var(--muted);">Latitude</th><td id="leftLat" style="text-align:right;"></td></tr>
              <tr><th style="text-align:left; padding:4px 0; color:var(--muted);">Longitude</th><td id="leftLon" style="text-align:right;"></td></tr>
              <tr><th style="text-align:left; padding:4px 0; color:var(--muted);">Date & Time</th><td id="leftJuld" style="text-align:right;"></td></tr>
            </tbody>
          </table>
          <button id="openCharts" class="pill" style="width:100%; padding:8px; background:#1f2937; color:#c7d2fe; border:1px solid #374151; cursor:pointer; margin:8px 0;">Show Depth Profiles</button>
          <div id="cycleSelector" style="margin-top:10px;">
            <div style="font-size:12px; color:var(--muted); margin-bottom:6px;">Previous Cycles:</div>
            <div id="cycleList" style="max-height:140px; overflow:auto; -ms-overflow-style:none; scrollbar-width:none; border:1px solid var(--border); border-radius:4px; background:var(--panel-muted);"></div>
          </div>
        </div>
        <div class="collapse-toggle" id="collapseToggle">◀</div>
      </aside>
      <div id="map"></div>
      
    </div>

    <!-- Charts modal -->
    <div id="chartsModal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h2 id="modalTitle">Depth Profiles</h2>
          <span class="close">&times;</span>
        </div>
        <div class="charts-grid">
          <div class="chart-container"><canvas id="chartTemp"></canvas></div>
          <div class="chart-container"><canvas id="chartSal"></canvas></div>
          <div class="chart-container"><canvas id="chartOxy"></canvas></div>
          <div class="chart-container"><canvas id="chartNit"></canvas></div>
          <div class="chart-container"><canvas id="chartPh"></canvas></div>
        </div>
      </div>
    </div>

    <script>
      const MAPBOX_TOKEN = 'pk.eyJ1IjoicmFtYW5hMDciLCJhIjoiY21mYXEzZ242MG1oMzJ3cW90bDZjMzhxZCJ9.ljbKIryXLAIOraJp6kIBgw';
      let FLOATS = [];

      mapboxgl.accessToken = MAPBOX_TOKEN;
      const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/dark-v11',
        center: [78.9629, 22.5937], // India
        zoom: 3,
        projection: 'mercator'
      });

      const {ScatterplotLayer, LineLayer, MapboxOverlay} = deck;
      let selectedFloatId = null;

      function floatsToScatterData() {
        return (FLOATS || []).map(f => ({
          id: f.id,
          type: f.type || 'core',
          position: [f.latest.longitude, f.latest.latitude],
          latest: f.latest,
          history: f.history
        }));
      }

      function buildTrajectoryPositions(history, latest) {
        const pts = (history || []).map(h => [h.longitude, h.latitude]);
        if (latest) pts.push([latest.longitude, latest.latitude]);
        return pts;
      }

      function renderLayers() {
        const filteredData = floatsToScatterData().filter(d => {
          if (currentFilter === 'all') return true;
          if (currentFilter === 'bgc') return d.type === 'bgc';
          if (currentFilter === 'core') return d.type !== 'bgc';
          return true;
        });
        
        const scatter = new ScatterplotLayer({
          id: 'floats-latest',
          data: filteredData,
          getPosition: d => d.position,
          getFillColor: d => (d.type === 'bgc' ? [16, 185, 129, 230] : [59, 130, 246, 230]),
          getRadius: 6, // pixels
          pickable: true,
          radiusUnits: 'pixels',
          parameters: { depthTest: false }
        });

        // Build trajectory for selected float - show all cycles
        const selected = (FLOATS || []).find(f => f.id === selectedFloatId);
        let lineData = [];
        if (selected && selected.cycles) {
          // Create trajectory for each cycle
          selected.cycles.forEach(cycle => {
            if (cycle.length > 1) {
              const cyclePath = cycle.map(point => [point.longitude, point.latitude]);
              lineData.push({ path: cyclePath });
            }
          });
        }

        const trajectory = new LineLayer({
          id: 'trajectory',
          data: lineData,
          getSourcePosition: d => d.path[0],
          getTargetPosition: d => d.path[d.path.length - 1],
          getColor: [220, 38, 38, 255], // red
          getWidth: 3,
          widthUnits: 'pixels',
          pickable: false,
          greatCircle: false,
          parameters: { depthTest: false }
        });

        // Historical small points - show all cycle points
        let historicalData = [];
        if (selected && selected.cycles) {
          selected.cycles.forEach((cycle, cycleIndex) => {
            cycle.forEach(point => {
              historicalData.push({ 
                position: [point.longitude, point.latitude],
                cycle: cycleIndex + 1
              });
            });
          });
        }
        
        const historicalPoints = new ScatterplotLayer({
          id: 'history-points',
          data: historicalData,
          getPosition: d => d.position,
          getFillColor: d => {
            // Different colors for different cycles
            const cycleColors = [
              [239, 68, 68, 180],   // red
              [34, 197, 94, 180],   // green
              [59, 130, 246, 180],  // blue
              [168, 85, 247, 180],  // purple
              [245, 158, 11, 180],  // orange
              [236, 72, 153, 180],  // pink
              [6, 182, 212, 180],   // cyan
              [34, 197, 94, 180]    // teal
            ];
            return cycleColors[d.cycle % cycleColors.length];
          },
          getRadius: 3,
          pickable: false,
          radiusUnits: 'pixels',
          parameters: { depthTest: false }
        });

        overlay.setProps({ layers: [scatter, trajectory, historicalPoints] });
      }

      const overlay = new MapboxOverlay({ interleaved: true, layers: [] });
      map.addControl(overlay);

      // Load data from API
      async function loadFloatsData() {
        try {
          const response = await fetch('/api/floats');
          FLOATS = await response.json();
          console.log(`[INFO] Loaded ${FLOATS.length} floats with optimized data`);
          renderLayers();
          populateList();
        } catch (err) {
          console.error('[ERROR] Failed to load floats data:', err);
        }
      }

      // Load complete data for a specific float
      async function loadCompleteFloatData(floatId) {
        try {
          const response = await fetch(`/api/float/${floatId}`);
          const completeFloat = await response.json();
          
          // Update the float in FLOATS array with complete data
          const index = FLOATS.findIndex(f => f.id === floatId);
          if (index !== -1) {
            FLOATS[index] = completeFloat;
            console.log(`[INFO] Loaded complete data for float ${floatId}`);
            return completeFloat;
          }
        } catch (err) {
          console.error('[ERROR] Failed to load complete float data:', err);
        }
        return null;
      }

      map.on('load', () => {
        loadFloatsData();
      });

      map.on('style.load', () => {
        // Re-render layers after style change
        renderLayers();
      });

      map.on('click', (e) => {
        const info = overlay.pickObject({ x: e.point.x, y: e.point.y });
        if (info && info.object && info.layer && info.layer.id === 'floats-latest') {
          const obj = info.object;
          selectedFloatId = obj.id;
          updateSidebar(obj);
          renderLayers();
        }
      });

      function formatNumber(n, digits = 4) {
        if (n === null || n === undefined || Number.isNaN(n)) return '';
        const num = Number(n);
        return Number.isFinite(num) ? num.toFixed(digits) : '';
      }

      function julianToDate(juld) {
        if (juld === null || juld === undefined || Number.isNaN(juld)) return '';
        // JULD is days since 1950-01-01 00:00:00 UTC
        const julianEpoch = new Date('1950-01-01T00:00:00Z');
        const millisecondsPerDay = 24 * 60 * 60 * 1000;
        const date = new Date(julianEpoch.getTime() + (juld * millisecondsPerDay));
        return date.toISOString().replace('T', ' ').replace('Z', ' UTC');
      }

      async function updateSidebar(obj) {
        if (!obj) return;
        const f = obj;
        const lat = f.latest.latitude;
        const lon = f.latest.longitude;
        // Inline details
        const details = document.getElementById('leftDetails');
        details.style.display = 'block';
        document.getElementById('leftFloatId').textContent = `Float ${f.id}`;
        document.getElementById('leftLat').textContent = formatNumber(lat, 5);
        document.getElementById('leftLon').textContent = formatNumber(lon, 5);
        document.getElementById('leftJuld').textContent = julianToDate(f.latest.juld);
        
        // Load complete data for this float if not already loaded
        if (f.cycles && f.cycles.length < 10) {
          const completeFloat = await loadCompleteFloatData(f.id);
          if (completeFloat) {
            populateCycleSelector(completeFloat);
            updateCharts(completeFloat);
          } else {
            populateCycleSelector(f);
            updateCharts(f);
          }
        } else {
          populateCycleSelector(f);
          updateCharts(f);
        }
      }

      let charts = {};
      function ensureChart(id, label, color) {
        const ctx = document.getElementById(id).getContext('2d');
        if (charts[id]) return charts[id];
        charts[id] = new Chart(ctx, {
          type: 'line',
          data: { labels: [], datasets: [{ label, data: [], borderColor: color, backgroundColor: color, pointRadius: 0, tension: 0.2 }] },
          options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false } }, scales: { x: { title: { display: true, text: 'Depth (PRES)' } }, y: { title: { display: true, text: label } } } }
        });
        return charts[id];
      }

      function updateCharts(f, cycleData = null) {
        const dataToUse = cycleData || (f.history || []).slice();
        // Use history to plot depth profiles; sort by pressure if available
        dataToUse.sort((a, b) => {
          const ap = a.pres ?? 0; const bp = b.pres ?? 0; return ap - bp;
        });
        const pres = dataToUse.map(h => h.pres).filter(v => v !== null && v !== undefined);
        const temp = dataToUse.map(h => h.temp).filter(v => v !== null && v !== undefined);
        const psal = dataToUse.map(h => h.psal).filter(v => v !== null && v !== undefined);
        const oxy = dataToUse.map(h => h.doxy).filter(v => v !== null && v !== undefined);
        const nit = dataToUse.map(h => h.nitrate).filter(v => v !== null && v !== undefined);
        const ph = dataToUse.map(h => h.ph).filter(v => v !== null && v !== undefined);

        const pairs = [
          { id: 'chartTemp', label: 'Temperature (°C)', vals: temp, color: '#f59e0b' },
          { id: 'chartSal', label: 'Salinity (PSU)', vals: psal, color: '#3b82f6' },
          { id: 'chartOxy', label: 'Oxygen (μmol/kg)', vals: oxy, color: '#10b981' },
          { id: 'chartNit', label: 'Nitrate (μmol/kg)', vals: nit, color: '#ef4444' },
          { id: 'chartPh', label: 'pH', vals: ph, color: '#a855f7' }
        ];

        // Animate charts with staggered appearance
        pairs.forEach((p, index) => {
          setTimeout(() => {
            const chart = ensureChart(p.id, p.label, p.color);
            const validData = [];
            const validLabels = [];
            for (let i = 0; i < Math.min(pres.length, p.vals.length); i++) {
              if (pres[i] !== null && pres[i] !== undefined && p.vals[i] !== null && p.vals[i] !== undefined) {
                validLabels.push(pres[i]);
                validData.push(p.vals[i]);
              }
            }
            chart.data.labels = validLabels;
            chart.data.datasets[0].data = validData;
            chart.update();
            
            // Show chart with animation
            const chartContainer = document.getElementById(p.id).parentElement;
            chartContainer.classList.add('visible');
          }, index * 200);
        });
      }

      function populateCycleSelector(f) {
        const cycleList = document.getElementById('cycleList');
        const cycleSelector = document.getElementById('cycleSelector');
        cycleList.innerHTML = '';
        
        // Use pre-computed cycles from backend
        const cycles = f.cycles || [];
        
        if (cycles.length === 0) {
          cycleSelector.style.display = 'none';
          return;
        }
        
        cycleSelector.style.display = 'block';
        
        cycles.forEach((cycle, index) => {
          const cycleItem = document.createElement('div');
          cycleItem.className = 'cycle-item';
          const startDate = julianToDate(cycle[0].juld);
          const endDate = julianToDate(cycle[cycle.length - 1].juld);
          const cycleNumber = cycles.length - index; // Most recent = highest number
          
          cycleItem.innerHTML = `
            <div style="font-weight:600;">Cycle ${cycleNumber}</div>
            <div style="color:var(--muted); font-size:10px;">${startDate.split(' ')[0]} - ${endDate.split(' ')[0]}</div>
            <div style="color:var(--muted); font-size:10px;">${cycle.length} points</div>
            <div style="color:var(--muted); font-size:10px;">Depth: ${Math.min(...cycle.map(p => p.pres)).toFixed(0)} - ${Math.max(...cycle.map(p => p.pres)).toFixed(0)} dbar</div>
          `;
          
          cycleItem.onclick = () => {
            // Update sidebar with cycle details
            const latestCycle = cycle[cycle.length - 1];
            document.getElementById('latCell').textContent = formatNumber(latestCycle.latitude, 5);
            document.getElementById('lonCell').textContent = formatNumber(latestCycle.longitude, 5);
            document.getElementById('juldCell').textContent = julianToDate(latestCycle.juld);
            
            // Update charts with cycle data
            updateCharts(f, cycle);
            
            // Highlight selected cycle
            document.querySelectorAll('.cycle-item').forEach(item => item.style.background = '');
            cycleItem.style.background = 'var(--border)';
          };
          
          cycleList.appendChild(cycleItem);
        });
      }

      // Left list filtering / search
      let currentFilter = 'all';
      let searchQuery = '';

      function matchesFilters(f) {
        const typeOk = currentFilter === 'all' || (currentFilter === 'bgc' ? f.type === 'bgc' : f.type !== 'bgc');
        const q = searchQuery.trim().toLowerCase();
        const text = `${f.id}`.toLowerCase();
        return typeOk && (q.length === 0 || text.includes(q));
      }

      function populateList() {
        const list = document.getElementById('listBody');
        list.innerHTML = '';
        const filtered = (FLOATS || []).filter(matchesFilters);
        document.getElementById('countPill').textContent = filtered.length;
        for (const f of filtered) {
          const row = document.createElement('div');
          row.style.display = 'grid';
          row.style.gridTemplateColumns = '1fr 1fr';
          row.style.gap = '8px';
          row.style.padding = '10px 12px';
          row.style.borderBottom = '1px solid #1f2937';
          row.style.cursor = 'pointer';
          row.onmouseenter = () => row.style.background = 'rgba(255,255,255,0.05)';
          row.onmouseleave = () => row.style.background = '';
          const col1 = document.createElement('div');
          col1.textContent = `${f.id}`;
          const col2 = document.createElement('div');
          col2.textContent = f.type === 'bgc' ? 'BGC' : 'INCOIS';
          row.appendChild(col1);
          row.appendChild(col2);
          row.onclick = () => {
            selectedFloatId = f.id;
            updateSidebar({ id: f.id, latest: f.latest, history: f.history });
            map.flyTo({ center: [f.latest.longitude, f.latest.latitude], zoom: Math.max(map.getZoom(), 4) });
            renderLayers();
          };
          list.appendChild(row);
        }
      }

      document.getElementById('filterAll').onclick = () => { currentFilter = 'all'; populateList(); renderLayers(); };
      document.getElementById('filterBGC').onclick = () => { currentFilter = 'bgc'; populateList(); renderLayers(); };
      document.getElementById('filterCore').onclick = () => { currentFilter = 'core'; populateList(); renderLayers(); };
      document.getElementById('searchInput').oninput = (e) => { searchQuery = e.target.value; populateList(); };

      // Modal functionality (charts still available if needed)
      // charts modal wiring
      const modal = document.getElementById('chartsModal');
      const closeBtn = modal.querySelector('.close');
      document.getElementById('openCharts').onclick = () => {
        modal.style.display = 'block';
        const selectedFloat = (FLOATS || []).find(f => f.id === selectedFloatId);
        if (selectedFloat) {
          document.querySelectorAll('.chart-container').forEach(c => c.classList.remove('visible'));
          updateCharts(selectedFloat);
          setTimeout(() => { document.querySelectorAll('.chart-container').forEach(c => c.classList.add('visible')); }, 50);
        }
      };
      closeBtn.onclick = () => { modal.style.display = 'none'; };
      window.addEventListener('click', (e) => { if (e.target === modal) modal.style.display = 'none'; });

      // Collapse toggle
      const collapseToggle = document.getElementById('collapseToggle');
      collapseToggle.onclick = () => {
        const isCollapsed = document.body.classList.toggle('collapsed');
        collapseToggle.textContent = isCollapsed ? '▶' : '◀';
        // Force map to resize after layout change
        setTimeout(() => map.resize(), 260);
      };
    </script>
  </body>
  </html>


